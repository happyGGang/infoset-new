/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as InformationImport } from './routes/information'
import { Route as GalleryImport } from './routes/gallery'
import { Route as EtcImport } from './routes/etc'
import { Route as BookInformationImport } from './routes/bookInformation'
import { Route as IndexImport } from './routes/index'
import { Route as SmartBImport } from './routes/smart.b'
import { Route as SmartAImport } from './routes/smart.a'
import { Route as MediaCImport } from './routes/media.c'
import { Route as MediaBImport } from './routes/media.b'
import { Route as MediaAImport } from './routes/media.a'
import { Route as LibraryCImport } from './routes/library.c'
import { Route as LibraryBImport } from './routes/library.b'
import { Route as LibraryAImport } from './routes/library.a'
import { Route as KioskCImport } from './routes/kiosk.c'
import { Route as KioskBImport } from './routes/kiosk.b'
import { Route as KioskAImport } from './routes/kiosk.a'

// Create/Update Routes

const InformationRoute = InformationImport.update({
  id: '/information',
  path: '/information',
  getParentRoute: () => rootRoute,
} as any)

const GalleryRoute = GalleryImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRoute,
} as any)

const EtcRoute = EtcImport.update({
  id: '/etc',
  path: '/etc',
  getParentRoute: () => rootRoute,
} as any)

const BookInformationRoute = BookInformationImport.update({
  id: '/bookInformation',
  path: '/bookInformation',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SmartBRoute = SmartBImport.update({
  id: '/smart/b',
  path: '/smart/b',
  getParentRoute: () => rootRoute,
} as any)

const SmartARoute = SmartAImport.update({
  id: '/smart/a',
  path: '/smart/a',
  getParentRoute: () => rootRoute,
} as any)

const MediaCRoute = MediaCImport.update({
  id: '/media/c',
  path: '/media/c',
  getParentRoute: () => rootRoute,
} as any)

const MediaBRoute = MediaBImport.update({
  id: '/media/b',
  path: '/media/b',
  getParentRoute: () => rootRoute,
} as any)

const MediaARoute = MediaAImport.update({
  id: '/media/a',
  path: '/media/a',
  getParentRoute: () => rootRoute,
} as any)

const LibraryCRoute = LibraryCImport.update({
  id: '/library/c',
  path: '/library/c',
  getParentRoute: () => rootRoute,
} as any)

const LibraryBRoute = LibraryBImport.update({
  id: '/library/b',
  path: '/library/b',
  getParentRoute: () => rootRoute,
} as any)

const LibraryARoute = LibraryAImport.update({
  id: '/library/a',
  path: '/library/a',
  getParentRoute: () => rootRoute,
} as any)

const KioskCRoute = KioskCImport.update({
  id: '/kiosk/c',
  path: '/kiosk/c',
  getParentRoute: () => rootRoute,
} as any)

const KioskBRoute = KioskBImport.update({
  id: '/kiosk/b',
  path: '/kiosk/b',
  getParentRoute: () => rootRoute,
} as any)

const KioskARoute = KioskAImport.update({
  id: '/kiosk/a',
  path: '/kiosk/a',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bookInformation': {
      id: '/bookInformation'
      path: '/bookInformation'
      fullPath: '/bookInformation'
      preLoaderRoute: typeof BookInformationImport
      parentRoute: typeof rootRoute
    }
    '/etc': {
      id: '/etc'
      path: '/etc'
      fullPath: '/etc'
      preLoaderRoute: typeof EtcImport
      parentRoute: typeof rootRoute
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryImport
      parentRoute: typeof rootRoute
    }
    '/information': {
      id: '/information'
      path: '/information'
      fullPath: '/information'
      preLoaderRoute: typeof InformationImport
      parentRoute: typeof rootRoute
    }
    '/kiosk/a': {
      id: '/kiosk/a'
      path: '/kiosk/a'
      fullPath: '/kiosk/a'
      preLoaderRoute: typeof KioskAImport
      parentRoute: typeof rootRoute
    }
    '/kiosk/b': {
      id: '/kiosk/b'
      path: '/kiosk/b'
      fullPath: '/kiosk/b'
      preLoaderRoute: typeof KioskBImport
      parentRoute: typeof rootRoute
    }
    '/kiosk/c': {
      id: '/kiosk/c'
      path: '/kiosk/c'
      fullPath: '/kiosk/c'
      preLoaderRoute: typeof KioskCImport
      parentRoute: typeof rootRoute
    }
    '/library/a': {
      id: '/library/a'
      path: '/library/a'
      fullPath: '/library/a'
      preLoaderRoute: typeof LibraryAImport
      parentRoute: typeof rootRoute
    }
    '/library/b': {
      id: '/library/b'
      path: '/library/b'
      fullPath: '/library/b'
      preLoaderRoute: typeof LibraryBImport
      parentRoute: typeof rootRoute
    }
    '/library/c': {
      id: '/library/c'
      path: '/library/c'
      fullPath: '/library/c'
      preLoaderRoute: typeof LibraryCImport
      parentRoute: typeof rootRoute
    }
    '/media/a': {
      id: '/media/a'
      path: '/media/a'
      fullPath: '/media/a'
      preLoaderRoute: typeof MediaAImport
      parentRoute: typeof rootRoute
    }
    '/media/b': {
      id: '/media/b'
      path: '/media/b'
      fullPath: '/media/b'
      preLoaderRoute: typeof MediaBImport
      parentRoute: typeof rootRoute
    }
    '/media/c': {
      id: '/media/c'
      path: '/media/c'
      fullPath: '/media/c'
      preLoaderRoute: typeof MediaCImport
      parentRoute: typeof rootRoute
    }
    '/smart/a': {
      id: '/smart/a'
      path: '/smart/a'
      fullPath: '/smart/a'
      preLoaderRoute: typeof SmartAImport
      parentRoute: typeof rootRoute
    }
    '/smart/b': {
      id: '/smart/b'
      path: '/smart/b'
      fullPath: '/smart/b'
      preLoaderRoute: typeof SmartBImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookInformation': typeof BookInformationRoute
  '/etc': typeof EtcRoute
  '/gallery': typeof GalleryRoute
  '/information': typeof InformationRoute
  '/kiosk/a': typeof KioskARoute
  '/kiosk/b': typeof KioskBRoute
  '/kiosk/c': typeof KioskCRoute
  '/library/a': typeof LibraryARoute
  '/library/b': typeof LibraryBRoute
  '/library/c': typeof LibraryCRoute
  '/media/a': typeof MediaARoute
  '/media/b': typeof MediaBRoute
  '/media/c': typeof MediaCRoute
  '/smart/a': typeof SmartARoute
  '/smart/b': typeof SmartBRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookInformation': typeof BookInformationRoute
  '/etc': typeof EtcRoute
  '/gallery': typeof GalleryRoute
  '/information': typeof InformationRoute
  '/kiosk/a': typeof KioskARoute
  '/kiosk/b': typeof KioskBRoute
  '/kiosk/c': typeof KioskCRoute
  '/library/a': typeof LibraryARoute
  '/library/b': typeof LibraryBRoute
  '/library/c': typeof LibraryCRoute
  '/media/a': typeof MediaARoute
  '/media/b': typeof MediaBRoute
  '/media/c': typeof MediaCRoute
  '/smart/a': typeof SmartARoute
  '/smart/b': typeof SmartBRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/bookInformation': typeof BookInformationRoute
  '/etc': typeof EtcRoute
  '/gallery': typeof GalleryRoute
  '/information': typeof InformationRoute
  '/kiosk/a': typeof KioskARoute
  '/kiosk/b': typeof KioskBRoute
  '/kiosk/c': typeof KioskCRoute
  '/library/a': typeof LibraryARoute
  '/library/b': typeof LibraryBRoute
  '/library/c': typeof LibraryCRoute
  '/media/a': typeof MediaARoute
  '/media/b': typeof MediaBRoute
  '/media/c': typeof MediaCRoute
  '/smart/a': typeof SmartARoute
  '/smart/b': typeof SmartBRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookInformation'
    | '/etc'
    | '/gallery'
    | '/information'
    | '/kiosk/a'
    | '/kiosk/b'
    | '/kiosk/c'
    | '/library/a'
    | '/library/b'
    | '/library/c'
    | '/media/a'
    | '/media/b'
    | '/media/c'
    | '/smart/a'
    | '/smart/b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bookInformation'
    | '/etc'
    | '/gallery'
    | '/information'
    | '/kiosk/a'
    | '/kiosk/b'
    | '/kiosk/c'
    | '/library/a'
    | '/library/b'
    | '/library/c'
    | '/media/a'
    | '/media/b'
    | '/media/c'
    | '/smart/a'
    | '/smart/b'
  id:
    | '__root__'
    | '/'
    | '/bookInformation'
    | '/etc'
    | '/gallery'
    | '/information'
    | '/kiosk/a'
    | '/kiosk/b'
    | '/kiosk/c'
    | '/library/a'
    | '/library/b'
    | '/library/c'
    | '/media/a'
    | '/media/b'
    | '/media/c'
    | '/smart/a'
    | '/smart/b'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookInformationRoute: typeof BookInformationRoute
  EtcRoute: typeof EtcRoute
  GalleryRoute: typeof GalleryRoute
  InformationRoute: typeof InformationRoute
  KioskARoute: typeof KioskARoute
  KioskBRoute: typeof KioskBRoute
  KioskCRoute: typeof KioskCRoute
  LibraryARoute: typeof LibraryARoute
  LibraryBRoute: typeof LibraryBRoute
  LibraryCRoute: typeof LibraryCRoute
  MediaARoute: typeof MediaARoute
  MediaBRoute: typeof MediaBRoute
  MediaCRoute: typeof MediaCRoute
  SmartARoute: typeof SmartARoute
  SmartBRoute: typeof SmartBRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookInformationRoute: BookInformationRoute,
  EtcRoute: EtcRoute,
  GalleryRoute: GalleryRoute,
  InformationRoute: InformationRoute,
  KioskARoute: KioskARoute,
  KioskBRoute: KioskBRoute,
  KioskCRoute: KioskCRoute,
  LibraryARoute: LibraryARoute,
  LibraryBRoute: LibraryBRoute,
  LibraryCRoute: LibraryCRoute,
  MediaARoute: MediaARoute,
  MediaBRoute: MediaBRoute,
  MediaCRoute: MediaCRoute,
  SmartARoute: SmartARoute,
  SmartBRoute: SmartBRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bookInformation",
        "/etc",
        "/gallery",
        "/information",
        "/kiosk/a",
        "/kiosk/b",
        "/kiosk/c",
        "/library/a",
        "/library/b",
        "/library/c",
        "/media/a",
        "/media/b",
        "/media/c",
        "/smart/a",
        "/smart/b"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bookInformation": {
      "filePath": "bookInformation.tsx"
    },
    "/etc": {
      "filePath": "etc.tsx"
    },
    "/gallery": {
      "filePath": "gallery.tsx"
    },
    "/information": {
      "filePath": "information.tsx"
    },
    "/kiosk/a": {
      "filePath": "kiosk.a.tsx"
    },
    "/kiosk/b": {
      "filePath": "kiosk.b.tsx"
    },
    "/kiosk/c": {
      "filePath": "kiosk.c.tsx"
    },
    "/library/a": {
      "filePath": "library.a.tsx"
    },
    "/library/b": {
      "filePath": "library.b.tsx"
    },
    "/library/c": {
      "filePath": "library.c.tsx"
    },
    "/media/a": {
      "filePath": "media.a.tsx"
    },
    "/media/b": {
      "filePath": "media.b.tsx"
    },
    "/media/c": {
      "filePath": "media.c.tsx"
    },
    "/smart/a": {
      "filePath": "smart.a.tsx"
    },
    "/smart/b": {
      "filePath": "smart.b.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
