/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BookInformationGroupImport } from './routes/bookInformationGroup'
import { Route as IndexImport } from './routes/index'
import { Route as InformationGroupWelcomeMessageImport } from './routes/informationGroup.welcomeMessage'
import { Route as InformationGroupPromotionImport } from './routes/informationGroup.promotion'
import { Route as InformationGroupNoticeImport } from './routes/informationGroup.notice'
import { Route as InformationGroupLivingImport } from './routes/informationGroup.living'
import { Route as InformationGroupInformationImport } from './routes/informationGroup.information'
import { Route as InformationGroupFacilityImport } from './routes/informationGroup.facility'
import { Route as InformationGroupEventImport } from './routes/informationGroup.event'
import { Route as GalleryDigitalGalleryImport } from './routes/gallery.digitalGallery'
import { Route as EtcReturnImport } from './routes/etc.return'
import { Route as EtcLineImport } from './routes/etc.line'
import { Route as EtcCourseRegistrationImport } from './routes/etc.courseRegistration'
import { Route as EtcCourseListImport } from './routes/etc.courseList'
import { Route as BookInformationGroupNewImport } from './routes/bookInformationGroup.new'
import { Route as BookInformationGroupLibrarianImport } from './routes/bookInformationGroup.librarian'
import { Route as BookInformationGroupDetailImport } from './routes/bookInformationGroup.detail'
import { Route as BookInformationGroupCustomImport } from './routes/bookInformationGroup.custom'
import { Route as BookInformationGroupChartImport } from './routes/bookInformationGroup.chart'
import { Route as BookInformationGroupBigdataImport } from './routes/bookInformationGroup.bigdata'
import { Route as BookInformationGroupBestImport } from './routes/bookInformationGroup.best'

// Create/Update Routes

const BookInformationGroupRoute = BookInformationGroupImport.update({
  id: '/bookInformationGroup',
  path: '/bookInformationGroup',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const InformationGroupWelcomeMessageRoute =
  InformationGroupWelcomeMessageImport.update({
    id: '/informationGroup/welcomeMessage',
    path: '/informationGroup/welcomeMessage',
    getParentRoute: () => rootRoute,
  } as any)

const InformationGroupPromotionRoute = InformationGroupPromotionImport.update({
  id: '/informationGroup/promotion',
  path: '/informationGroup/promotion',
  getParentRoute: () => rootRoute,
} as any)

const InformationGroupNoticeRoute = InformationGroupNoticeImport.update({
  id: '/informationGroup/notice',
  path: '/informationGroup/notice',
  getParentRoute: () => rootRoute,
} as any)

const InformationGroupLivingRoute = InformationGroupLivingImport.update({
  id: '/informationGroup/living',
  path: '/informationGroup/living',
  getParentRoute: () => rootRoute,
} as any)

const InformationGroupInformationRoute =
  InformationGroupInformationImport.update({
    id: '/informationGroup/information',
    path: '/informationGroup/information',
    getParentRoute: () => rootRoute,
  } as any)

const InformationGroupFacilityRoute = InformationGroupFacilityImport.update({
  id: '/informationGroup/facility',
  path: '/informationGroup/facility',
  getParentRoute: () => rootRoute,
} as any)

const InformationGroupEventRoute = InformationGroupEventImport.update({
  id: '/informationGroup/event',
  path: '/informationGroup/event',
  getParentRoute: () => rootRoute,
} as any)

const GalleryDigitalGalleryRoute = GalleryDigitalGalleryImport.update({
  id: '/gallery/digitalGallery',
  path: '/gallery/digitalGallery',
  getParentRoute: () => rootRoute,
} as any)

const EtcReturnRoute = EtcReturnImport.update({
  id: '/etc/return',
  path: '/etc/return',
  getParentRoute: () => rootRoute,
} as any)

const EtcLineRoute = EtcLineImport.update({
  id: '/etc/line',
  path: '/etc/line',
  getParentRoute: () => rootRoute,
} as any)

const EtcCourseRegistrationRoute = EtcCourseRegistrationImport.update({
  id: '/etc/courseRegistration',
  path: '/etc/courseRegistration',
  getParentRoute: () => rootRoute,
} as any)

const EtcCourseListRoute = EtcCourseListImport.update({
  id: '/etc/courseList',
  path: '/etc/courseList',
  getParentRoute: () => rootRoute,
} as any)

const BookInformationGroupNewRoute = BookInformationGroupNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => BookInformationGroupRoute,
} as any)

const BookInformationGroupLibrarianRoute =
  BookInformationGroupLibrarianImport.update({
    id: '/librarian',
    path: '/librarian',
    getParentRoute: () => BookInformationGroupRoute,
  } as any)

const BookInformationGroupDetailRoute = BookInformationGroupDetailImport.update(
  {
    id: '/detail',
    path: '/detail',
    getParentRoute: () => BookInformationGroupRoute,
  } as any,
)

const BookInformationGroupCustomRoute = BookInformationGroupCustomImport.update(
  {
    id: '/custom',
    path: '/custom',
    getParentRoute: () => BookInformationGroupRoute,
  } as any,
)

const BookInformationGroupChartRoute = BookInformationGroupChartImport.update({
  id: '/chart',
  path: '/chart',
  getParentRoute: () => BookInformationGroupRoute,
} as any)

const BookInformationGroupBigdataRoute =
  BookInformationGroupBigdataImport.update({
    id: '/bigdata',
    path: '/bigdata',
    getParentRoute: () => BookInformationGroupRoute,
  } as any)

const BookInformationGroupBestRoute = BookInformationGroupBestImport.update({
  id: '/best',
  path: '/best',
  getParentRoute: () => BookInformationGroupRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/bookInformationGroup': {
      id: '/bookInformationGroup'
      path: '/bookInformationGroup'
      fullPath: '/bookInformationGroup'
      preLoaderRoute: typeof BookInformationGroupImport
      parentRoute: typeof rootRoute
    }
    '/bookInformationGroup/best': {
      id: '/bookInformationGroup/best'
      path: '/best'
      fullPath: '/bookInformationGroup/best'
      preLoaderRoute: typeof BookInformationGroupBestImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/bookInformationGroup/bigdata': {
      id: '/bookInformationGroup/bigdata'
      path: '/bigdata'
      fullPath: '/bookInformationGroup/bigdata'
      preLoaderRoute: typeof BookInformationGroupBigdataImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/bookInformationGroup/chart': {
      id: '/bookInformationGroup/chart'
      path: '/chart'
      fullPath: '/bookInformationGroup/chart'
      preLoaderRoute: typeof BookInformationGroupChartImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/bookInformationGroup/custom': {
      id: '/bookInformationGroup/custom'
      path: '/custom'
      fullPath: '/bookInformationGroup/custom'
      preLoaderRoute: typeof BookInformationGroupCustomImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/bookInformationGroup/detail': {
      id: '/bookInformationGroup/detail'
      path: '/detail'
      fullPath: '/bookInformationGroup/detail'
      preLoaderRoute: typeof BookInformationGroupDetailImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/bookInformationGroup/librarian': {
      id: '/bookInformationGroup/librarian'
      path: '/librarian'
      fullPath: '/bookInformationGroup/librarian'
      preLoaderRoute: typeof BookInformationGroupLibrarianImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/bookInformationGroup/new': {
      id: '/bookInformationGroup/new'
      path: '/new'
      fullPath: '/bookInformationGroup/new'
      preLoaderRoute: typeof BookInformationGroupNewImport
      parentRoute: typeof BookInformationGroupImport
    }
    '/etc/courseList': {
      id: '/etc/courseList'
      path: '/etc/courseList'
      fullPath: '/etc/courseList'
      preLoaderRoute: typeof EtcCourseListImport
      parentRoute: typeof rootRoute
    }
    '/etc/courseRegistration': {
      id: '/etc/courseRegistration'
      path: '/etc/courseRegistration'
      fullPath: '/etc/courseRegistration'
      preLoaderRoute: typeof EtcCourseRegistrationImport
      parentRoute: typeof rootRoute
    }
    '/etc/line': {
      id: '/etc/line'
      path: '/etc/line'
      fullPath: '/etc/line'
      preLoaderRoute: typeof EtcLineImport
      parentRoute: typeof rootRoute
    }
    '/etc/return': {
      id: '/etc/return'
      path: '/etc/return'
      fullPath: '/etc/return'
      preLoaderRoute: typeof EtcReturnImport
      parentRoute: typeof rootRoute
    }
    '/gallery/digitalGallery': {
      id: '/gallery/digitalGallery'
      path: '/gallery/digitalGallery'
      fullPath: '/gallery/digitalGallery'
      preLoaderRoute: typeof GalleryDigitalGalleryImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/event': {
      id: '/informationGroup/event'
      path: '/informationGroup/event'
      fullPath: '/informationGroup/event'
      preLoaderRoute: typeof InformationGroupEventImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/facility': {
      id: '/informationGroup/facility'
      path: '/informationGroup/facility'
      fullPath: '/informationGroup/facility'
      preLoaderRoute: typeof InformationGroupFacilityImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/information': {
      id: '/informationGroup/information'
      path: '/informationGroup/information'
      fullPath: '/informationGroup/information'
      preLoaderRoute: typeof InformationGroupInformationImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/living': {
      id: '/informationGroup/living'
      path: '/informationGroup/living'
      fullPath: '/informationGroup/living'
      preLoaderRoute: typeof InformationGroupLivingImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/notice': {
      id: '/informationGroup/notice'
      path: '/informationGroup/notice'
      fullPath: '/informationGroup/notice'
      preLoaderRoute: typeof InformationGroupNoticeImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/promotion': {
      id: '/informationGroup/promotion'
      path: '/informationGroup/promotion'
      fullPath: '/informationGroup/promotion'
      preLoaderRoute: typeof InformationGroupPromotionImport
      parentRoute: typeof rootRoute
    }
    '/informationGroup/welcomeMessage': {
      id: '/informationGroup/welcomeMessage'
      path: '/informationGroup/welcomeMessage'
      fullPath: '/informationGroup/welcomeMessage'
      preLoaderRoute: typeof InformationGroupWelcomeMessageImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface BookInformationGroupRouteChildren {
  BookInformationGroupBestRoute: typeof BookInformationGroupBestRoute
  BookInformationGroupBigdataRoute: typeof BookInformationGroupBigdataRoute
  BookInformationGroupChartRoute: typeof BookInformationGroupChartRoute
  BookInformationGroupCustomRoute: typeof BookInformationGroupCustomRoute
  BookInformationGroupDetailRoute: typeof BookInformationGroupDetailRoute
  BookInformationGroupLibrarianRoute: typeof BookInformationGroupLibrarianRoute
  BookInformationGroupNewRoute: typeof BookInformationGroupNewRoute
}

const BookInformationGroupRouteChildren: BookInformationGroupRouteChildren = {
  BookInformationGroupBestRoute: BookInformationGroupBestRoute,
  BookInformationGroupBigdataRoute: BookInformationGroupBigdataRoute,
  BookInformationGroupChartRoute: BookInformationGroupChartRoute,
  BookInformationGroupCustomRoute: BookInformationGroupCustomRoute,
  BookInformationGroupDetailRoute: BookInformationGroupDetailRoute,
  BookInformationGroupLibrarianRoute: BookInformationGroupLibrarianRoute,
  BookInformationGroupNewRoute: BookInformationGroupNewRoute,
}

const BookInformationGroupRouteWithChildren =
  BookInformationGroupRoute._addFileChildren(BookInformationGroupRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookInformationGroup': typeof BookInformationGroupRouteWithChildren
  '/bookInformationGroup/best': typeof BookInformationGroupBestRoute
  '/bookInformationGroup/bigdata': typeof BookInformationGroupBigdataRoute
  '/bookInformationGroup/chart': typeof BookInformationGroupChartRoute
  '/bookInformationGroup/custom': typeof BookInformationGroupCustomRoute
  '/bookInformationGroup/detail': typeof BookInformationGroupDetailRoute
  '/bookInformationGroup/librarian': typeof BookInformationGroupLibrarianRoute
  '/bookInformationGroup/new': typeof BookInformationGroupNewRoute
  '/etc/courseList': typeof EtcCourseListRoute
  '/etc/courseRegistration': typeof EtcCourseRegistrationRoute
  '/etc/line': typeof EtcLineRoute
  '/etc/return': typeof EtcReturnRoute
  '/gallery/digitalGallery': typeof GalleryDigitalGalleryRoute
  '/informationGroup/event': typeof InformationGroupEventRoute
  '/informationGroup/facility': typeof InformationGroupFacilityRoute
  '/informationGroup/information': typeof InformationGroupInformationRoute
  '/informationGroup/living': typeof InformationGroupLivingRoute
  '/informationGroup/notice': typeof InformationGroupNoticeRoute
  '/informationGroup/promotion': typeof InformationGroupPromotionRoute
  '/informationGroup/welcomeMessage': typeof InformationGroupWelcomeMessageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookInformationGroup': typeof BookInformationGroupRouteWithChildren
  '/bookInformationGroup/best': typeof BookInformationGroupBestRoute
  '/bookInformationGroup/bigdata': typeof BookInformationGroupBigdataRoute
  '/bookInformationGroup/chart': typeof BookInformationGroupChartRoute
  '/bookInformationGroup/custom': typeof BookInformationGroupCustomRoute
  '/bookInformationGroup/detail': typeof BookInformationGroupDetailRoute
  '/bookInformationGroup/librarian': typeof BookInformationGroupLibrarianRoute
  '/bookInformationGroup/new': typeof BookInformationGroupNewRoute
  '/etc/courseList': typeof EtcCourseListRoute
  '/etc/courseRegistration': typeof EtcCourseRegistrationRoute
  '/etc/line': typeof EtcLineRoute
  '/etc/return': typeof EtcReturnRoute
  '/gallery/digitalGallery': typeof GalleryDigitalGalleryRoute
  '/informationGroup/event': typeof InformationGroupEventRoute
  '/informationGroup/facility': typeof InformationGroupFacilityRoute
  '/informationGroup/information': typeof InformationGroupInformationRoute
  '/informationGroup/living': typeof InformationGroupLivingRoute
  '/informationGroup/notice': typeof InformationGroupNoticeRoute
  '/informationGroup/promotion': typeof InformationGroupPromotionRoute
  '/informationGroup/welcomeMessage': typeof InformationGroupWelcomeMessageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/bookInformationGroup': typeof BookInformationGroupRouteWithChildren
  '/bookInformationGroup/best': typeof BookInformationGroupBestRoute
  '/bookInformationGroup/bigdata': typeof BookInformationGroupBigdataRoute
  '/bookInformationGroup/chart': typeof BookInformationGroupChartRoute
  '/bookInformationGroup/custom': typeof BookInformationGroupCustomRoute
  '/bookInformationGroup/detail': typeof BookInformationGroupDetailRoute
  '/bookInformationGroup/librarian': typeof BookInformationGroupLibrarianRoute
  '/bookInformationGroup/new': typeof BookInformationGroupNewRoute
  '/etc/courseList': typeof EtcCourseListRoute
  '/etc/courseRegistration': typeof EtcCourseRegistrationRoute
  '/etc/line': typeof EtcLineRoute
  '/etc/return': typeof EtcReturnRoute
  '/gallery/digitalGallery': typeof GalleryDigitalGalleryRoute
  '/informationGroup/event': typeof InformationGroupEventRoute
  '/informationGroup/facility': typeof InformationGroupFacilityRoute
  '/informationGroup/information': typeof InformationGroupInformationRoute
  '/informationGroup/living': typeof InformationGroupLivingRoute
  '/informationGroup/notice': typeof InformationGroupNoticeRoute
  '/informationGroup/promotion': typeof InformationGroupPromotionRoute
  '/informationGroup/welcomeMessage': typeof InformationGroupWelcomeMessageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookInformationGroup'
    | '/bookInformationGroup/best'
    | '/bookInformationGroup/bigdata'
    | '/bookInformationGroup/chart'
    | '/bookInformationGroup/custom'
    | '/bookInformationGroup/detail'
    | '/bookInformationGroup/librarian'
    | '/bookInformationGroup/new'
    | '/etc/courseList'
    | '/etc/courseRegistration'
    | '/etc/line'
    | '/etc/return'
    | '/gallery/digitalGallery'
    | '/informationGroup/event'
    | '/informationGroup/facility'
    | '/informationGroup/information'
    | '/informationGroup/living'
    | '/informationGroup/notice'
    | '/informationGroup/promotion'
    | '/informationGroup/welcomeMessage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bookInformationGroup'
    | '/bookInformationGroup/best'
    | '/bookInformationGroup/bigdata'
    | '/bookInformationGroup/chart'
    | '/bookInformationGroup/custom'
    | '/bookInformationGroup/detail'
    | '/bookInformationGroup/librarian'
    | '/bookInformationGroup/new'
    | '/etc/courseList'
    | '/etc/courseRegistration'
    | '/etc/line'
    | '/etc/return'
    | '/gallery/digitalGallery'
    | '/informationGroup/event'
    | '/informationGroup/facility'
    | '/informationGroup/information'
    | '/informationGroup/living'
    | '/informationGroup/notice'
    | '/informationGroup/promotion'
    | '/informationGroup/welcomeMessage'
  id:
    | '__root__'
    | '/'
    | '/bookInformationGroup'
    | '/bookInformationGroup/best'
    | '/bookInformationGroup/bigdata'
    | '/bookInformationGroup/chart'
    | '/bookInformationGroup/custom'
    | '/bookInformationGroup/detail'
    | '/bookInformationGroup/librarian'
    | '/bookInformationGroup/new'
    | '/etc/courseList'
    | '/etc/courseRegistration'
    | '/etc/line'
    | '/etc/return'
    | '/gallery/digitalGallery'
    | '/informationGroup/event'
    | '/informationGroup/facility'
    | '/informationGroup/information'
    | '/informationGroup/living'
    | '/informationGroup/notice'
    | '/informationGroup/promotion'
    | '/informationGroup/welcomeMessage'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookInformationGroupRoute: typeof BookInformationGroupRouteWithChildren
  EtcCourseListRoute: typeof EtcCourseListRoute
  EtcCourseRegistrationRoute: typeof EtcCourseRegistrationRoute
  EtcLineRoute: typeof EtcLineRoute
  EtcReturnRoute: typeof EtcReturnRoute
  GalleryDigitalGalleryRoute: typeof GalleryDigitalGalleryRoute
  InformationGroupEventRoute: typeof InformationGroupEventRoute
  InformationGroupFacilityRoute: typeof InformationGroupFacilityRoute
  InformationGroupInformationRoute: typeof InformationGroupInformationRoute
  InformationGroupLivingRoute: typeof InformationGroupLivingRoute
  InformationGroupNoticeRoute: typeof InformationGroupNoticeRoute
  InformationGroupPromotionRoute: typeof InformationGroupPromotionRoute
  InformationGroupWelcomeMessageRoute: typeof InformationGroupWelcomeMessageRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookInformationGroupRoute: BookInformationGroupRouteWithChildren,
  EtcCourseListRoute: EtcCourseListRoute,
  EtcCourseRegistrationRoute: EtcCourseRegistrationRoute,
  EtcLineRoute: EtcLineRoute,
  EtcReturnRoute: EtcReturnRoute,
  GalleryDigitalGalleryRoute: GalleryDigitalGalleryRoute,
  InformationGroupEventRoute: InformationGroupEventRoute,
  InformationGroupFacilityRoute: InformationGroupFacilityRoute,
  InformationGroupInformationRoute: InformationGroupInformationRoute,
  InformationGroupLivingRoute: InformationGroupLivingRoute,
  InformationGroupNoticeRoute: InformationGroupNoticeRoute,
  InformationGroupPromotionRoute: InformationGroupPromotionRoute,
  InformationGroupWelcomeMessageRoute: InformationGroupWelcomeMessageRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/bookInformationGroup",
        "/etc/courseList",
        "/etc/courseRegistration",
        "/etc/line",
        "/etc/return",
        "/gallery/digitalGallery",
        "/informationGroup/event",
        "/informationGroup/facility",
        "/informationGroup/information",
        "/informationGroup/living",
        "/informationGroup/notice",
        "/informationGroup/promotion",
        "/informationGroup/welcomeMessage"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/bookInformationGroup": {
      "filePath": "bookInformationGroup.tsx",
      "children": [
        "/bookInformationGroup/best",
        "/bookInformationGroup/bigdata",
        "/bookInformationGroup/chart",
        "/bookInformationGroup/custom",
        "/bookInformationGroup/detail",
        "/bookInformationGroup/librarian",
        "/bookInformationGroup/new"
      ]
    },
    "/bookInformationGroup/best": {
      "filePath": "bookInformationGroup.best.tsx",
      "parent": "/bookInformationGroup"
    },
    "/bookInformationGroup/bigdata": {
      "filePath": "bookInformationGroup.bigdata.tsx",
      "parent": "/bookInformationGroup"
    },
    "/bookInformationGroup/chart": {
      "filePath": "bookInformationGroup.chart.tsx",
      "parent": "/bookInformationGroup"
    },
    "/bookInformationGroup/custom": {
      "filePath": "bookInformationGroup.custom.tsx",
      "parent": "/bookInformationGroup"
    },
    "/bookInformationGroup/detail": {
      "filePath": "bookInformationGroup.detail.tsx",
      "parent": "/bookInformationGroup"
    },
    "/bookInformationGroup/librarian": {
      "filePath": "bookInformationGroup.librarian.tsx",
      "parent": "/bookInformationGroup"
    },
    "/bookInformationGroup/new": {
      "filePath": "bookInformationGroup.new.tsx",
      "parent": "/bookInformationGroup"
    },
    "/etc/courseList": {
      "filePath": "etc.courseList.tsx"
    },
    "/etc/courseRegistration": {
      "filePath": "etc.courseRegistration.tsx"
    },
    "/etc/line": {
      "filePath": "etc.line.tsx"
    },
    "/etc/return": {
      "filePath": "etc.return.tsx"
    },
    "/gallery/digitalGallery": {
      "filePath": "gallery.digitalGallery.tsx"
    },
    "/informationGroup/event": {
      "filePath": "informationGroup.event.tsx"
    },
    "/informationGroup/facility": {
      "filePath": "informationGroup.facility.tsx"
    },
    "/informationGroup/information": {
      "filePath": "informationGroup.information.tsx"
    },
    "/informationGroup/living": {
      "filePath": "informationGroup.living.tsx"
    },
    "/informationGroup/notice": {
      "filePath": "informationGroup.notice.tsx"
    },
    "/informationGroup/promotion": {
      "filePath": "informationGroup.promotion.tsx"
    },
    "/informationGroup/welcomeMessage": {
      "filePath": "informationGroup.welcomeMessage.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
